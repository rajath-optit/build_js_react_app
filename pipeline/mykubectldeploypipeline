@Library('shared-libraries') _

pipeline {
    agent any

    parameters {
        string(name: 'GIT_URL', description: 'Git repository URL where the mainifests file as stored')
        string(name: 'GIT_BRANCH_NAME', description: 'Source Code Branch to build')
        credentials(name: 'GIT_CREDENTIAL', description: 'Jenkins credential for Git repo', required: true)
        string(name: 'MANIFEST_FILE_PATH', description: 'Path to the manifest file')
        string(name: 'NAMESPACE', description: 'Kubernetes namespace')
        credentials(name: 'KUBE_CONFIG_CREDENTIAL', description: 'Jenkins credential for Kubernetes config file (kubeconfig)', required: true)
    }

    stages {
        stage('Load Scripts') {
            steps {
                script {
                    // Define baseDir for Jenkins shared libraries
                    def baseDir = "${env.WORKSPACE}/Jenkins/shared-libraries"

                    // Load scripts using dynamically constructed paths
                    def loadScript = { type, technology, scriptName ->
                        def scriptPath = "${baseDir}/${type}/${technology}/${scriptName}.groovy"
                        return load(scriptPath)
                    }

                    // Load scripts from 'vars' directory
                    gitCheckoutScript = loadScript('vars/common/scm-util', 'git', 'GitCheckout')
                    kubernetesDeployScript = loadScript('vars/common', 'Deploy', 'deployToKubernetesByusingKUBECTL')
                }
            }
        }

        stage('Git Checkout') {
            steps {
                script {
                    gitCheckoutScript.gitCheckout(params.GIT_BRANCH_NAME, params.GIT_URL, params.GIT_CREDENTIAL)
                }
            }
        }

        stage('Deploy to Kubernetes') {
            steps {
                script {
                    // Retrieve the kubeconfig file from Jenkins credentials
                    withCredentials([file(credentialsId: params.KUBE_CONFIG_CREDENTIAL, variable: 'KUBECONFIG_FILE')]) {
                        def kubeconfigPath = "${env.WORKSPACE}/.kube/config"
                        sh """
                            mkdir -p ${env.WORKSPACE}/.kube
                        """
                        writeFile file: kubeconfigPath, text: sh(returnStdout: true, script: "cat ${KUBECONFIG_FILE}")
 
                        // Ensure proper permissions (chmod 600) on the kubeconfig file
                        sh "chmod 600 ${kubeconfigPath}"
                        
                        withEnv(["KUBECONFIG=${kubeconfigPath}"]) {
                            // Add debug statements to confirm the paths and environment variable
                            sh "echo 'Using kubeconfig at: ${kubeconfigPath}'"
                            sh "echo 'KUBECONFIG environment variable: ${env.KUBECONFIG}'"
                            
                        // Call the deploy function from the shared library with appropriate arguments
                        def manifestPath = "${env.WORKSPACE}/${params.MANIFEST_FILE_PATH}"
                        
                        kubernetesDeployScript.deployToKubernetesByusingKUBECTL(kubeconfigPath, params.NAMESPACE, manifestPath)
                        }    
                    }
                }
            }
        }
    }
}
