<?xml version='1.1' encoding='UTF-8'?>
<flow-definition plugin="workflow-job@1400.v7fd111b_ec82f">
  <actions>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobAction plugin="pipeline-model-definition@2.2175.v76a_fff0a_2618"/>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction plugin="pipeline-model-definition@2.2175.v76a_fff0a_2618">
      <jobProperties/>
      <triggers/>
      <parameters>
        <string>NAMESPACE</string>
        <string>IMAGE_TAG</string>
        <string>IMAGE_NAME</string>
        <string>KUBE_CONFIG_CREDENTIAL</string>
        <string>GIT_URL</string>
        <string>Values_Yaml_Path</string>
        <string>BRANCH_NAME</string>
        <string>HELM_CHART_PATH</string>
        <string>HELM_RELEASE_NAME</string>
      </parameters>
      <options/>
    </org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction>
  </actions>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <jenkins.model.BuildDiscarderProperty>
      <strategy class="hudson.tasks.LogRotator">
        <daysToKeep>-1</daysToKeep>
        <numToKeep>3</numToKeep>
        <artifactDaysToKeep>-1</artifactDaysToKeep>
        <artifactNumToKeep>-1</artifactNumToKeep>
      </strategy>
    </jenkins.model.BuildDiscarderProperty>
    <com.synopsys.arc.jenkins.plugins.ownership.jobs.JobOwnerJobProperty plugin="ownership@0.13.0">
      <ownership>
        <ownershipEnabled>true</ownershipEnabled>
        <primaryOwnerId>admin</primaryOwnerId>
        <coownersIds class="sorted-set"/>
      </ownership>
    </com.synopsys.arc.jenkins.plugins.ownership.jobs.JobOwnerJobProperty>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>BRANCH_NAME</name>
          <description>Branch to build from</description>
          <defaultValue>main</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>GIT_URL</name>
          <description>Git repository URL</description>
          <defaultValue>https://github.com/optit-cloud-team/optit-lab-service.git</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>HELM_CHART_PATH</name>
          <description>Path to the Helm chart directory</description>
          <defaultValue>helm/optit-lab-service/</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>NAMESPACE</name>
          <description>Kubernetes namespace</description>
          <defaultValue>optit-lab</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>IMAGE_NAME</name>
          <description>Docker image name</description>
          <defaultValue>bharathoptdocker/optit-lab-service</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>IMAGE_TAG</name>
          <description>Docker image tag</description>
          <defaultValue>latest</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>HELM_RELEASE_NAME</name>
          <description>Helm release name</description>
          <defaultValue>optit-lab-service</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>Values_Yaml_Path</name>
          <description>valuesyaml</description>
          <defaultValue>helm/optit-lab-service/values.yaml</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <com.cloudbees.plugins.credentials.CredentialsParameterDefinition plugin="credentials@1319.v7eb_51b_3a_c97b_">
          <name>KUBE_CONFIG_CREDENTIAL</name>
          <description>Jenkins credential for Kubernetes config file (kubeconfig)</description>
          <defaultValue></defaultValue>
          <required>true</required>
        </com.cloudbees.plugins.credentials.CredentialsParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@3867.v535458ce43fd">
    <script>@Library(&apos;shared-libraries&apos;) _

def gitCheckoutScript
def deployWithHelmScript

pipeline {
    agent any

    parameters {
        string(name: &apos;BRANCH_NAME&apos;, defaultValue: &apos;main&apos;, description: &apos;Branch to build from&apos;)
        string(name: &apos;GIT_URL&apos;, defaultValue: &apos;https://github.com/optit-cloud-team/optit-lab-service.git&apos;, description: &apos;Git repository URL&apos;)
        string(name: &apos;HELM_CHART_PATH&apos;, defaultValue: &apos;helm/optit-lab-service/&apos;, description: &apos;Path to the Helm chart directory&apos;)
        string(name: &apos;NAMESPACE&apos;, defaultValue: &apos;optit-lab&apos;, description: &apos;Kubernetes namespace&apos;)
        string(name: &apos;IMAGE_NAME&apos;, defaultValue: &apos;bharathoptdocker/optit-lab-service&apos;, description: &apos;Docker image name&apos;)
        string(name: &apos;IMAGE_TAG&apos;, defaultValue: &apos;latest&apos;, description: &apos;Docker image tag&apos;)
        string(name: &apos;HELM_RELEASE_NAME&apos;, defaultValue: &apos;optit-lab-service&apos;, description: &apos;Helm release name&apos;)
        string(name: &apos;Values_Yaml_Path&apos;, defaultValue: &apos;helm/optit-lab-service/values.yaml&apos;, description: &apos;valuesyaml&apos;)
        credentials(name: &apos;KUBE_CONFIG_CREDENTIAL&apos;, description: &apos;Jenkins credential for Kubernetes config file (kubeconfig)&apos;, defaultValue: &apos;&apos;, required: true)
    }

    stages {
        stage(&apos;Git Checkout CICD Repo&apos;) {
            steps {
                script {
                    dir(&apos;cicd-repo&apos;) {
                        git branch: &apos;main&apos;,
                            credentialsId: &apos;bkgit&apos;,
                            url: &apos;https://github.com/optimize-it/CICD.git&apos;
                    }
                }
            }
        }

        stage(&apos;Load DSL&apos;) {
            steps {
                script {
                    gitCheckoutScript = load &apos;./cicd-repo/Jenkins/shared-libraries/vars/common/scm-util/git/GitCheckout.groovy&apos;
                    deployWithHelmScript = load &apos;./cicd-repo/Jenkins/shared-libraries/vars/common/Deploy/HelmDeployWithValues.groovy&apos;
                }
            }
        }

        stage(&apos;Git Checkout&apos;) {
            steps {
                script {
                    gitCheckoutScript.gitCheckout(params.BRANCH_NAME, params.GIT_URL, &apos;bharath&apos;)
                }
            }
        }

        stage(&apos;Deploy to Kubernetes with Helm&apos;) {
            steps {
                script {
                    // Retrieve the kubeconfig file from Jenkins credentials
                    withCredentials([file(credentialsId: params.KUBE_CONFIG_CREDENTIAL, variable: &apos;KUBECONFIG_FILE&apos;)]) {
                        def kubeconfigDir = &quot;${env.WORKSPACE}/.kube&quot;
                        def kubeconfigPath = &quot;${kubeconfigDir}/config&quot;
                        sh &quot;&quot;&quot;
                            mkdir -p ${kubeconfigDir}
                          
                        &quot;&quot;&quot;

                        // Path to the Helm chart directory
                        def helmChartPath = &quot;${env.WORKSPACE}/${params.HELM_CHART_PATH}&quot;
                        def imageName = params.IMAGE_NAME
                        def imageTag = params.IMAGE_TAG
                       

                        // Call the deployWithHelm function from the shared library
                        deployWithHelmScript.deployWithHelm(helmChartPath, params.HELM_RELEASE_NAME, params.NAMESPACE, imageName, imageTag , params.Values_Yaml_Path)
                    }
                }
            }
        }
    }
}
</script>
    <sandbox>true</sandbox>
  </definition>
  <triggers/>
  <disabled>false</disabled>
</flow-definition>
