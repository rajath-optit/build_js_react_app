@Library('shared-libraries') _


pipeline {
    agent any

    parameters {
        string(name: 'GIT_SOURCE_CODE_URL', description: 'Git repository URL for source code')
        string(name: 'SOURCE_CODE_BRANCH_NAME', description: 'Source Code Branch to build')
        credentials(name: 'GIT_SOURCE_CODE_CREDENTIAL', description: 'Jenkins credential for source code Git repo', required: true)
        choice(name: 'REGISTRY', choices: ['DockerHub', 'ECR', 'ACR', 'GCR'], description: 'Select the cloud container registry service where the Docker images will be pushed:')
        string(name: 'DOCKER_REPO', description: 'Docker repository')
        string(name: 'DOCKER_IMAGE_NAME', description: 'Docker image name')
        string(name: 'DOCKER_IMAGE_TAG', description: 'Docker image tag')
        credentials(name: 'DOCKER_CREDENTIAL', description: 'Jenkins credential for DockerHub', required: true)
        string(name: 'SONAR_PROJECT_KEY', description: 'SonarQube project key')
        string(name: 'SONAR_ORGANIZATION', description: 'SonarQube organization key')
        string(name: 'SONAR_SOURCES_DIR', description: 'Source code directory for SonarQube analysis')
        credentials(name: 'SONAR_TOKEN', description: 'SonarQube authentication token', required: true)

    }

    stages {
        stage('Conditional Parameter Setup') {
            steps {
                script {
                    // Define parameters based on REGISTRY value
                    if (params.REGISTRY == 'DockerHub') {
                        properties([
                            parameters([
                                string(name: 'DOCKER_REPO', defaultValue: '', description: 'Docker repository'),
                                string(name: 'DOCKER_IMAGE_NAME', defaultValue: '', description: 'Docker image name'),
                                string(name: 'DOCKER_IMAGE_TAG', defaultValue: '', description: 'Docker image tag')
                            ])
                        ])
                    } else if (params.REGISTRY == 'ECR') {
                        properties([
                            parameters([
                                string(name: 'AWS_REGION', defaultValue: '', description: 'AWS region for ECR'),
                                string(name: 'AWS_ACCOUNT_ID', defaultValue: '', description: 'AWS account ID'),
                                string(name: 'DOCKER_IMAGE_NAME', defaultValue: '', description: 'Docker image name'),
                                string(name: 'DOCKER_IMAGE_TAG', defaultValue: '', description: 'Docker image tag')
                            ])
                        ])
                    } else if (params.REGISTRY == 'ACR') {
                        properties([
                            parameters([
                                string(name: 'AZURE_REGISTRY', defaultValue: '', description: 'Azure Container Registry (ACR) name'),
                                string(name: 'DOCKER_IMAGE_NAME', defaultValue: '', description: 'Docker image name'),
                                string(name: 'DOCKER_IMAGE_TAG', defaultValue: '', description: 'Docker image tag')
                            ])
                        ])
                    } else if (params.REGISTRY == 'GCR') {
                        properties([
                            parameters([
                                string(name: 'GOOGLE_APPLICATION_CREDENTIALS', defaultValue: '', description: 'Google Application Credentials JSON'),
                                string(name: 'GCP_REGION', defaultValue: '', description: 'Google Cloud Platform (GCP) region'),
                                string(name: 'GCP_PROJECT_ID', defaultValue: '', description: 'Google Cloud Platform (GCP) project ID'),
                                string(name: 'DOCKER_IMAGE_NAME', defaultValue: '', description: 'Docker image name'),
                                string(name: 'DOCKER_IMAGE_TAG', defaultValue: '', description: 'Docker image tag')
                            ])
                        ])
                    } else {
                        error "Unsupported registry specified"
                    }
                }
            }
        }

        stage('Load DSL') {
            steps {
                script {

                     // Define baseDir for Jenkins shared libraries
                    def baseDir = "${env.WORKSPACE}/Jenkins/shared-libraries"

                    // Load scripts using dynamically constructed paths
                    def loadScript = { type, technology, scriptName ->
                        def scriptPath = "${baseDir}/${type}/${technology}/${scriptName}.groovy"
                        return load(scriptPath)
                    }

                    // Load scripts from 'vars' directory
                    gitCheckoutScript = loadScript('vars/common/scm-util', 'git', 'GitCheckout')
                    sonarScript = loadScript('vars/common', 'codeAnalysis', 'PerformSonarAnalysisForReactjs')
                    dockerBuildScript = loadScript('vars/common', 'dockerUtil', 'DockerUtil')
                    dockerPublishScript = loadScript('vars/common', 'containerPublish', 'DockerHubPublish')
                    dockerPublishscriptECR = loadScript('vars/common', 'containerPublish', 'ECRPublish')
                    dockerPublishscriptACR = loadScript('vars/common', 'containerPublish', 'ACRPublish')
                    dockerPublishscriptGCR = loadScript('vars/common', 'containerPublish', 'GCRPublish')
                    
                    // Load scripts from 'src' directory
                    buildWithNpmScript = loadScript('src/org/common', 'build', 'BuildWithNpm')
                    unitTestWithNpmScript = loadScript('src/org/common', 'unitTest', 'UnitTestWithNpm')
                    
                }
            }
        }

        stage('Git Checkout') {
            steps {
                script {
                    gitCheckoutScript.gitCheckout(params.SOURCE_CODE_BRANCH_NAME, params.GIT_SOURCE_CODE_URL, params.GIT_SOURCE_CODE_CREDENTIAL)
                }
            }
        }

        stage('Build') {
            steps {
                script {
                    // Example usage of loaded build script
                    buildWithNpmScript.build()
                }
            }
        }

        stage('Unit Test') {
            steps {
                script {
                    // Example usage of loaded test script
                    unitTestWithNpmScript.unitTest()
                }
            }
        }

        stage('SonarQube Analysis') {
            steps {
                script {
                    sonarScript.performSonarCloudAnalysis(
                        params.SONAR_PROJECT_KEY, 
                        params.SONAR_ORGANIZATION, 
                        params.SONAR_SOURCES_DIR, 
                        params.SONAR_TOKEN
                    )
                }
            }
        }

        stage('Container Build') {
            steps {
                script {
                    dockerBuildScript.dockerBuild(params.DOCKER_IMAGE_NAME, params.DOCKER_IMAGE_TAG)
                }
            }
        }
        
        stage('Container Publish') {
            steps {
                script {
                    if (params.REGISTRY == 'DockerHub') {

                        dockerPublishScript.publishToContainer(params.DOCKER_IMAGE_NAME, params.DOCKER_REPO, params.DOCKER_IMAGE_TAG, params.DOCKER_CREDENTIAL)

                    }  else if (params.REGISTRY == 'ECR') {

                        dockerPublishscriptECR.publishToContainer(params.AWS_REGION, params.AWS_ACCOUNT_ID, params.DOCKER_IMAGE_NAME, params.DOCKER_IMAGE_TAG)

                    }  else if (params.REGISTRY == 'ACR') {

                        dockerPublishscriptACR.publishToContainer(params.AZURE_REGISTRY, params.DOCKER_IMAGE_NAME, params.DOCKER_IMAGE_TAG)

                    }  else if (params.REGISTRY == 'GCR') {

                        dockerPublishscriptGCR.publishToContainer(params.GOOGLE_APPLICATION_CREDENTIALS, params.GCP_REGION, params.GCP_PROJECT_ID, params.DOCKER_IMAGE_NAME, params.DOCKER_IMAGE_TAG)

                    } else {

                        error "Unsupported registry specified"

                    }    
                }
            }
        } 
    }
}
